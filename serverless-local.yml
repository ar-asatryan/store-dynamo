service: my-express-application

#custom:
#  tableName: 'users-table-${self:provider.stage}'

plugins:
  - serverless-dynamodb-local
  - serverless-offline-direct-lambda
  - serverless-offline

custom:
  tableName: 'users-table-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true

# custom:
#   serverless-offline:
#     httpsProtocol: "dev-certs"
#     httpPort: 4000
#     stageVariables:
#       foo: "bar"

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-north-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
environment:
  USERS_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  getUser:
    handler: index.handler
    events:
      - http: 'GET /users/{proxy+}'
  createUser:
    handler: index.handler
    events:
      - http: 'POST /users'

# functions:
#   load:
#     handler: handler.main
#     events:
#       - http:
#            path: /load
#            method: POST

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

